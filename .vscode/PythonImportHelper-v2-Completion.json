[
    {
        "label": "tkinter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinter",
        "description": "tkinter",
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "ttk",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "messagebox",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "filedialog",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "ThemedStyle",
        "importPath": "ttkthemes",
        "description": "ttkthemes",
        "isExtraImport": true,
        "detail": "ttkthemes",
        "documentation": {}
    },
    {
        "label": "OpenAI_API",
        "importPath": "openai_api",
        "description": "openai_api",
        "isExtraImport": true,
        "detail": "openai_api",
        "documentation": {}
    },
    {
        "label": "OpenAI_API",
        "importPath": "openai_api",
        "description": "openai_api",
        "isExtraImport": true,
        "detail": "openai_api",
        "documentation": {}
    },
    {
        "label": "OpenAI_API",
        "importPath": "openai_api",
        "description": "openai_api",
        "isExtraImport": true,
        "detail": "openai_api",
        "documentation": {}
    },
    {
        "label": "take_screenshot",
        "importPath": "screenshot",
        "description": "screenshot",
        "isExtraImport": true,
        "detail": "screenshot",
        "documentation": {}
    },
    {
        "label": "image_to_base64",
        "importPath": "screenshot",
        "description": "screenshot",
        "isExtraImport": true,
        "detail": "screenshot",
        "documentation": {}
    },
    {
        "label": "take_screenshot",
        "importPath": "screenshot",
        "description": "screenshot",
        "isExtraImport": true,
        "detail": "screenshot",
        "documentation": {}
    },
    {
        "label": "image_to_base64",
        "importPath": "screenshot",
        "description": "screenshot",
        "isExtraImport": true,
        "detail": "screenshot",
        "documentation": {}
    },
    {
        "label": "take_screenshot",
        "importPath": "screenshot",
        "description": "screenshot",
        "isExtraImport": true,
        "detail": "screenshot",
        "documentation": {}
    },
    {
        "label": "image_to_base64",
        "importPath": "screenshot",
        "description": "screenshot",
        "isExtraImport": true,
        "detail": "screenshot",
        "documentation": {}
    },
    {
        "label": "capture_camera_image",
        "importPath": "camera",
        "description": "camera",
        "isExtraImport": true,
        "detail": "camera",
        "documentation": {}
    },
    {
        "label": "capture_camera_image",
        "importPath": "camera",
        "description": "camera",
        "isExtraImport": true,
        "detail": "camera",
        "documentation": {}
    },
    {
        "label": "capture_camera_image",
        "importPath": "camera",
        "description": "camera",
        "isExtraImport": true,
        "detail": "camera",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "collections",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "collections",
        "description": "collections",
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "HISTORY_LIMIT",
        "importPath": "settings",
        "description": "settings",
        "isExtraImport": true,
        "detail": "settings",
        "documentation": {}
    },
    {
        "label": "TASK_DESCRIPTION",
        "importPath": "settings",
        "description": "settings",
        "isExtraImport": true,
        "detail": "settings",
        "documentation": {}
    },
    {
        "label": "SESSION_DURATION",
        "importPath": "settings",
        "description": "settings",
        "isExtraImport": true,
        "detail": "settings",
        "documentation": {}
    },
    {
        "label": "CHECK_INTERVAL",
        "importPath": "settings",
        "description": "settings",
        "isExtraImport": true,
        "detail": "settings",
        "documentation": {}
    },
    {
        "label": "INSTRUCTION_BLOCK",
        "importPath": "settings",
        "description": "settings",
        "isExtraImport": true,
        "detail": "settings",
        "documentation": {}
    },
    {
        "label": "HISTORY_LIMIT",
        "importPath": "settings",
        "description": "settings",
        "isExtraImport": true,
        "detail": "settings",
        "documentation": {}
    },
    {
        "label": "USE_SCREENSHOT",
        "importPath": "settings",
        "description": "settings",
        "isExtraImport": true,
        "detail": "settings",
        "documentation": {}
    },
    {
        "label": "USE_CAMERA_IMAGE",
        "importPath": "settings",
        "description": "settings",
        "isExtraImport": true,
        "detail": "settings",
        "documentation": {}
    },
    {
        "label": "OPENAI_API_KEY",
        "importPath": "settings",
        "description": "settings",
        "isExtraImport": true,
        "detail": "settings",
        "documentation": {}
    },
    {
        "label": "SCREENSHOT_PATH",
        "importPath": "settings",
        "description": "settings",
        "isExtraImport": true,
        "detail": "settings",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "History",
        "importPath": "history",
        "description": "history",
        "isExtraImport": true,
        "detail": "history",
        "documentation": {}
    },
    {
        "label": "provide_audio_feedback",
        "importPath": "audio_feedback",
        "description": "audio_feedback",
        "isExtraImport": true,
        "detail": "audio_feedback",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "dotenv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dotenv",
        "description": "dotenv",
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "pyautogui",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyautogui",
        "description": "pyautogui",
        "detail": "pyautogui",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "App",
        "kind": 6,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "class App:\n    def __init__(self, root):\n        self.root = root\n        self.root.title(\"FOCUS GUARDIAN\")\n        self.create_widgets()\n        self.client = OpenAI_API()\n        self.cycle_count = 0\n        self.total_duration_seconds = 0\n        self.is_paused = False\n        self.is_reset = False",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "provide_audio_feedback",
        "kind": 2,
        "importPath": "audio_feedback",
        "description": "audio_feedback",
        "peekOfCode": "def provide_audio_feedback(message):\n    \"\"\"\n    Function to provide audio feedback using the Mac's 'say' command.\n    \"\"\"\n    try:\n        # Replace single quotes and parentheses in the message with escaped versions\n        message = message.replace(\"'\", \"\\\\'\").replace(\"(\", \"\\\\(\").replace(\")\", \"\\\\)\")\n        # Execute the 'say' command with the message\n        os.system(f'say {message}')\n    except Exception as e:",
        "detail": "audio_feedback",
        "documentation": {}
    },
    {
        "label": "capture_camera_image",
        "kind": 2,
        "importPath": "camera",
        "description": "camera",
        "peekOfCode": "def capture_camera_image(filename):\n    cap = cv2.VideoCapture(0)\n    if not cap.isOpened():\n        raise IOError(\"Cannot open webcam\")\n    time.sleep(2)  # Warm-up period for the camera to adjust to lighting conditions\n    ret, frame = cap.read()\n    if not ret:\n        raise IOError(\"Failed to capture image from camera\")\n    cv2.imwrite(filename, frame)\n    cap.release()",
        "detail": "camera",
        "documentation": {}
    },
    {
        "label": "History",
        "kind": 6,
        "importPath": "history",
        "description": "history",
        "peekOfCode": "class History:\n    def __init__(self):\n        self.history = collections.deque(maxlen=HISTORY_LIMIT)\n    def add_to_history(self, interaction):\n        self.history.append(interaction)\n    def get_history(self):\n        return list(self.history)",
        "detail": "history",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def main():\n    # print(\"Initializing OpenAI API...\")\n    openai_api = OpenAI_API()\n    # print(\"OpenAI API initialized.\")\n    # print(\"Initializing history...\")\n    history = History()\n    # print(\"History initialized.\")\n    # print(\"Calculating end time...\")\n    end_time = datetime.now() + timedelta(minutes=SESSION_DURATION)\n    print(f\"End time calculated: {end_time}\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "OpenAI_API",
        "kind": 6,
        "importPath": "openai_api",
        "description": "openai_api",
        "peekOfCode": "class OpenAI_API:\n    def __init__(self):\n        self.headers = {\n            'Content-Type': 'application/json',\n            'Authorization': f'Bearer {OPENAI_API_KEY}'\n        }\n    @staticmethod\n    def encode_image(image_path):\n        with open(image_path, 'rb') as image_file:\n            return base64.b64encode(image_file.read()).decode('utf-8')",
        "detail": "openai_api",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "openai_api",
        "description": "openai_api",
        "peekOfCode": "def main():\n    # Initialize the OpenAI API client\n    client = OpenAI_API()\n    # Define the instruction block and the image path\n    instruction_block = \"What’s in this image?\"\n    screenshot_path = \"screenshot.png\"\n    camera_image_path = \"camera_image.png\"\n    # Define the history (empty in this example)\n    history = []\n    # Send the request to the OpenAI API",
        "detail": "openai_api",
        "documentation": {}
    },
    {
        "label": "take_screenshot",
        "kind": 2,
        "importPath": "screenshot",
        "description": "screenshot",
        "peekOfCode": "def take_screenshot(filename):\n    \"\"\"\n    Function to take a screenshot using the Mac's 'screencapture' command.\n    \"\"\"\n    try:\n        # Execute the 'screencapture' command with the filename\n        os.system(f'screencapture {filename}')\n    except Exception as e:\n        print(f\"Error while trying to take screenshot: {str(e)}\")\ndef image_to_base64(filename):",
        "detail": "screenshot",
        "documentation": {}
    },
    {
        "label": "image_to_base64",
        "kind": 2,
        "importPath": "screenshot",
        "description": "screenshot",
        "peekOfCode": "def image_to_base64(filename):\n    \"\"\"\n    Function to convert an image file to a base64 string.\n    \"\"\"\n    with open(filename, \"rb\") as image_file:\n        return base64.b64encode(image_file.read()).decode('utf-8')\nif __name__ == \"__main__\":\n    # Test the functions\n    take_screenshot(\"screenshot.png\")\n    screenshot_base64 = image_to_base64(\"screenshot.png\")",
        "detail": "screenshot",
        "documentation": {}
    },
    {
        "label": "OPENAI_API_KEY",
        "kind": 5,
        "importPath": "settings",
        "description": "settings",
        "peekOfCode": "OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')\n# User settings\nTASK_DESCRIPTION = \"google travel tips for thailand\"\nSESSION_DURATION = 60000  # in seconds\nCHECK_INTERVAL = 60  # in seconds\n# Image source settings\nUSE_SCREENSHOT = True\nUSE_CAMERA_IMAGE = False\nINSTRUCTION_BLOCK = \"\"\"\nYour name is focus guardian, you are a guardian that helps people stay focused on their tasks.",
        "detail": "settings",
        "documentation": {}
    },
    {
        "label": "TASK_DESCRIPTION",
        "kind": 5,
        "importPath": "settings",
        "description": "settings",
        "peekOfCode": "TASK_DESCRIPTION = \"google travel tips for thailand\"\nSESSION_DURATION = 60000  # in seconds\nCHECK_INTERVAL = 60  # in seconds\n# Image source settings\nUSE_SCREENSHOT = True\nUSE_CAMERA_IMAGE = False\nINSTRUCTION_BLOCK = \"\"\"\nYour name is focus guardian, you are a guardian that helps people stay focused on their tasks.\nBen the user is supposed to be doing the following task:\nTASK_DESCRIPTION = \"Get your code organized and do some research into the trading strategies for the Rick ai\"",
        "detail": "settings",
        "documentation": {}
    },
    {
        "label": "SESSION_DURATION",
        "kind": 5,
        "importPath": "settings",
        "description": "settings",
        "peekOfCode": "SESSION_DURATION = 60000  # in seconds\nCHECK_INTERVAL = 60  # in seconds\n# Image source settings\nUSE_SCREENSHOT = True\nUSE_CAMERA_IMAGE = False\nINSTRUCTION_BLOCK = \"\"\"\nYour name is focus guardian, you are a guardian that helps people stay focused on their tasks.\nBen the user is supposed to be doing the following task:\nTASK_DESCRIPTION = \"Get your code organized and do some research into the trading strategies for the Rick ai\"\ncheck if the user seems to be doing the right thing by looking at the image and seeing if what they have on screen seems to be associated with their task. If it isn't reply with a simple message reminded them to get back on track. If it does seem like what they are doing is on tasks, congradulate them on their focus on wish them luck.",
        "detail": "settings",
        "documentation": {}
    },
    {
        "label": "CHECK_INTERVAL",
        "kind": 5,
        "importPath": "settings",
        "description": "settings",
        "peekOfCode": "CHECK_INTERVAL = 60  # in seconds\n# Image source settings\nUSE_SCREENSHOT = True\nUSE_CAMERA_IMAGE = False\nINSTRUCTION_BLOCK = \"\"\"\nYour name is focus guardian, you are a guardian that helps people stay focused on their tasks.\nBen the user is supposed to be doing the following task:\nTASK_DESCRIPTION = \"Get your code organized and do some research into the trading strategies for the Rick ai\"\ncheck if the user seems to be doing the right thing by looking at the image and seeing if what they have on screen seems to be associated with their task. If it isn't reply with a simple message reminded them to get back on track. If it does seem like what they are doing is on tasks, congradulate them on their focus on wish them luck.\nBe brief given that the user is trying to focus. I they are on task, say \"That's awesome\" and if they are not on task, say \"That's not awesome\"",
        "detail": "settings",
        "documentation": {}
    },
    {
        "label": "USE_SCREENSHOT",
        "kind": 5,
        "importPath": "settings",
        "description": "settings",
        "peekOfCode": "USE_SCREENSHOT = True\nUSE_CAMERA_IMAGE = False\nINSTRUCTION_BLOCK = \"\"\"\nYour name is focus guardian, you are a guardian that helps people stay focused on their tasks.\nBen the user is supposed to be doing the following task:\nTASK_DESCRIPTION = \"Get your code organized and do some research into the trading strategies for the Rick ai\"\ncheck if the user seems to be doing the right thing by looking at the image and seeing if what they have on screen seems to be associated with their task. If it isn't reply with a simple message reminded them to get back on track. If it does seem like what they are doing is on tasks, congradulate them on their focus on wish them luck.\nBe brief given that the user is trying to focus. I they are on task, say \"That's awesome\" and if they are not on task, say \"That's not awesome\"\nalways end every message with, good luck Ben!\n\"\"\"",
        "detail": "settings",
        "documentation": {}
    },
    {
        "label": "USE_CAMERA_IMAGE",
        "kind": 5,
        "importPath": "settings",
        "description": "settings",
        "peekOfCode": "USE_CAMERA_IMAGE = False\nINSTRUCTION_BLOCK = \"\"\"\nYour name is focus guardian, you are a guardian that helps people stay focused on their tasks.\nBen the user is supposed to be doing the following task:\nTASK_DESCRIPTION = \"Get your code organized and do some research into the trading strategies for the Rick ai\"\ncheck if the user seems to be doing the right thing by looking at the image and seeing if what they have on screen seems to be associated with their task. If it isn't reply with a simple message reminded them to get back on track. If it does seem like what they are doing is on tasks, congradulate them on their focus on wish them luck.\nBe brief given that the user is trying to focus. I they are on task, say \"That's awesome\" and if they are not on task, say \"That's not awesome\"\nalways end every message with, good luck Ben!\n\"\"\"\n# INSTRUCTION_BLOCK = \"\"\"",
        "detail": "settings",
        "documentation": {}
    },
    {
        "label": "INSTRUCTION_BLOCK",
        "kind": 5,
        "importPath": "settings",
        "description": "settings",
        "peekOfCode": "INSTRUCTION_BLOCK = \"\"\"\nYour name is focus guardian, you are a guardian that helps people stay focused on their tasks.\nBen the user is supposed to be doing the following task:\nTASK_DESCRIPTION = \"Get your code organized and do some research into the trading strategies for the Rick ai\"\ncheck if the user seems to be doing the right thing by looking at the image and seeing if what they have on screen seems to be associated with their task. If it isn't reply with a simple message reminded them to get back on track. If it does seem like what they are doing is on tasks, congradulate them on their focus on wish them luck.\nBe brief given that the user is trying to focus. I they are on task, say \"That's awesome\" and if they are not on task, say \"That's not awesome\"\nalways end every message with, good luck Ben!\n\"\"\"\n# INSTRUCTION_BLOCK = \"\"\"\n# what color is my shirt?",
        "detail": "settings",
        "documentation": {}
    },
    {
        "label": "TASK_DESCRIPTION",
        "kind": 5,
        "importPath": "settings",
        "description": "settings",
        "peekOfCode": "TASK_DESCRIPTION = \"Get your code organized and do some research into the trading strategies for the Rick ai\"\ncheck if the user seems to be doing the right thing by looking at the image and seeing if what they have on screen seems to be associated with their task. If it isn't reply with a simple message reminded them to get back on track. If it does seem like what they are doing is on tasks, congradulate them on their focus on wish them luck.\nBe brief given that the user is trying to focus. I they are on task, say \"That's awesome\" and if they are not on task, say \"That's not awesome\"\nalways end every message with, good luck Ben!\n\"\"\"\n# INSTRUCTION_BLOCK = \"\"\"\n# what color is my shirt?\n# \"\"\"\n# INSTRUCTION_BLOCK = \"\"\"\n# can you be a doll and tell me if I looks like im sitting hunched or up strait? love u mwwa ",
        "detail": "settings",
        "documentation": {}
    },
    {
        "label": "HISTORY_LIMIT",
        "kind": 5,
        "importPath": "settings",
        "description": "settings",
        "peekOfCode": "HISTORY_LIMIT = 5\n# OpenAI API settings\nOPENAI_API_KEY = os.getenv('OPENAI_API_KEY')\nOPENAI_API_ENDPOINT = \"https://api.openai.com/v1/engines/davinci-codex/completions\"\n# Screenshot settings\nSCREENSHOT_PATH = \"./screenshots/\"\n# Audio feedback settings\nimport pyautogui\nimport os\nimport time",
        "detail": "settings",
        "documentation": {}
    },
    {
        "label": "OPENAI_API_KEY",
        "kind": 5,
        "importPath": "settings",
        "description": "settings",
        "peekOfCode": "OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')\nOPENAI_API_ENDPOINT = \"https://api.openai.com/v1/engines/davinci-codex/completions\"\n# Screenshot settings\nSCREENSHOT_PATH = \"./screenshots/\"\n# Audio feedback settings\nimport pyautogui\nimport os\nimport time\nfrom settings import SCREENSHOT_PATH\n# def capture_screenshot(filename):",
        "detail": "settings",
        "documentation": {}
    },
    {
        "label": "OPENAI_API_ENDPOINT",
        "kind": 5,
        "importPath": "settings",
        "description": "settings",
        "peekOfCode": "OPENAI_API_ENDPOINT = \"https://api.openai.com/v1/engines/davinci-codex/completions\"\n# Screenshot settings\nSCREENSHOT_PATH = \"./screenshots/\"\n# Audio feedback settings\nimport pyautogui\nimport os\nimport time\nfrom settings import SCREENSHOT_PATH\n# def capture_screenshot(filename):\n#     \"\"\"",
        "detail": "settings",
        "documentation": {}
    },
    {
        "label": "SCREENSHOT_PATH",
        "kind": 5,
        "importPath": "settings",
        "description": "settings",
        "peekOfCode": "SCREENSHOT_PATH = \"./screenshots/\"\n# Audio feedback settings\nimport pyautogui\nimport os\nimport time\nfrom settings import SCREENSHOT_PATH\n# def capture_screenshot(filename):\n#     \"\"\"\n#     Function to capture a screenshot and save it to the specified path.\n#     \"\"\"",
        "detail": "settings",
        "documentation": {}
    },
    {
        "label": "APP",
        "kind": 5,
        "importPath": "setup",
        "description": "setup",
        "peekOfCode": "APP = ['app.py']\nDATA_FILES = []\nOPTIONS = {\n    'argv_emulation': True,\n    'packages': ['tkinter', 'ttkthemes'],\n    'includes': ['rubicon-objc'],\n    # If you have other packages or data files, include them here\n}\nsetup(\n    app=APP,",
        "detail": "setup",
        "documentation": {}
    },
    {
        "label": "DATA_FILES",
        "kind": 5,
        "importPath": "setup",
        "description": "setup",
        "peekOfCode": "DATA_FILES = []\nOPTIONS = {\n    'argv_emulation': True,\n    'packages': ['tkinter', 'ttkthemes'],\n    'includes': ['rubicon-objc'],\n    # If you have other packages or data files, include them here\n}\nsetup(\n    app=APP,\n    data_files=DATA_FILES,",
        "detail": "setup",
        "documentation": {}
    },
    {
        "label": "OPTIONS",
        "kind": 5,
        "importPath": "setup",
        "description": "setup",
        "peekOfCode": "OPTIONS = {\n    'argv_emulation': True,\n    'packages': ['tkinter', 'ttkthemes'],\n    'includes': ['rubicon-objc'],\n    # If you have other packages or data files, include them here\n}\nsetup(\n    app=APP,\n    data_files=DATA_FILES,\n    options={'py2app': OPTIONS},",
        "detail": "setup",
        "documentation": {}
    },
    {
        "label": "perform_task",
        "kind": 2,
        "importPath": "webapp",
        "description": "webapp",
        "peekOfCode": "def perform_task(task, use_screenshots, use_photos):\n    screenshot_filename = None\n    camera_image_filename = None\n    if use_screenshots:\n        screenshot_filename = \"screenshot.png\"\n        take_screenshot(screenshot_filename)\n    if use_photos:\n        camera_image_filename = \"camera_image.png\"\n        capture_camera_image(camera_image_filename)\n    print(\"Sending request to OpenAI API...\")",
        "detail": "webapp",
        "documentation": {}
    },
    {
        "label": "provide_audio_feedback",
        "kind": 2,
        "importPath": "webapp",
        "description": "webapp",
        "peekOfCode": "def provide_audio_feedback(message):\n    \"\"\"\n    Function to provide audio feedback using the system's text-to-speech functionality.\n    \"\"\"\n    try:\n        # Replace problematic characters in the message\n        message = message.replace(\"'\", \"\\\\'\").replace(\"(\", \"\\\\(\").replace(\")\", \"\\\\)\")\n        # Execute the 'say' command with the message\n        subprocess.call(['say', message])\n    except Exception as e:",
        "detail": "webapp",
        "documentation": {}
    },
    {
        "label": "start_task",
        "kind": 2,
        "importPath": "webapp",
        "description": "webapp",
        "peekOfCode": "def start_task():\n    task_state['is_reset'] = False\n    task_state['is_running'] = True\n    interval = task_state['interval']\n    duration = task_state['duration']\n    task = task_state['task']\n    perform_task(task, task_state['use_screenshots'], task_state['use_photos'])\n    task_state['total_duration_seconds'] = duration * 60\n    for cycle in range(duration):\n        if task_state['is_reset']:",
        "detail": "webapp",
        "documentation": {}
    },
    {
        "label": "update_labels",
        "kind": 2,
        "importPath": "webapp",
        "description": "webapp",
        "peekOfCode": "def update_labels():\n    total_minutes, total_seconds = divmod(task_state['total_duration_seconds'], 60)\n@app.route('/', methods=['GET', 'POST'])\ndef index():\n    if request.method == 'POST':\n        # Handle form submission\n        task_state['use_screenshots'] = 'use_screenshots' in request.form\n        task_state['use_photos'] = 'use_photos' in request.form\n        task_state['interval'] = int(request.form['interval'])\n        task_state['duration'] = int(request.form['duration'])",
        "detail": "webapp",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "webapp",
        "description": "webapp",
        "peekOfCode": "def index():\n    if request.method == 'POST':\n        # Handle form submission\n        task_state['use_screenshots'] = 'use_screenshots' in request.form\n        task_state['use_photos'] = 'use_photos' in request.form\n        task_state['interval'] = int(request.form['interval'])\n        task_state['duration'] = int(request.form['duration'])\n        task_state['task'] = request.form['task']\n        # Start the task in a new thread\n        threading.Thread(target=start_task).start()",
        "detail": "webapp",
        "documentation": {}
    },
    {
        "label": "pause_task",
        "kind": 2,
        "importPath": "webapp",
        "description": "webapp",
        "peekOfCode": "def pause_task():\n    task_state['is_paused'] = not task_state['is_paused']\n    return jsonify(success=True)\n@app.route('/reset', methods=['POST'])\ndef reset_task():\n    task_state['is_reset'] = True\n    task_state['is_running'] = False\n    task_state['cycle_count'] = 0\n    task_state['totalnt']['total_duration_seconds'] = 0\n    return jsonify(success=True)",
        "detail": "webapp",
        "documentation": {}
    },
    {
        "label": "reset_task",
        "kind": 2,
        "importPath": "webapp",
        "description": "webapp",
        "peekOfCode": "def reset_task():\n    task_state['is_reset'] = True\n    task_state['is_running'] = False\n    task_state['cycle_count'] = 0\n    task_state['totalnt']['total_duration_seconds'] = 0\n    return jsonify(success=True)\n@app.route('/status')\ndef get_status():\n    # Endpoint to get the current status of the task\n    total_minutes, total_seconds = divmod(task_state['total_duration_seconds'], 60)",
        "detail": "webapp",
        "documentation": {}
    },
    {
        "label": "get_status",
        "kind": 2,
        "importPath": "webapp",
        "description": "webapp",
        "peekOfCode": "def get_status():\n    # Endpoint to get the current status of the task\n    total_minutes, total_seconds = divmod(task_state['total_duration_seconds'], 60)\n    return jsonify({\n        'cycle_count': task_state['cycle_count'],\n        'cycle_timer': f\"{total_minutes}:{total_seconds:02d}\",\n        'total_duration': f\"{total_minutes}:{total_seconds:02d}\",\n        'is_paused': task_state['is_paused'],\n        'is_running': task_state['is_running']\n    })",
        "detail": "webapp",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 2,
        "importPath": "webapp",
        "description": "webapp",
        "peekOfCode": "def start():\n    app.run(debug=True)\nif __name__ == '__main__':\n    start()",
        "detail": "webapp",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "webapp",
        "description": "webapp",
        "peekOfCode": "app = Flask(__name__)\napp.secret_key = 'your_secret_key'  # Replace with a real secret key\n# Initialize OpenAI API client\nclient = OpenAI_API()\n# Global variables to keep track of the task state\ntask_state = {\n    'cycle_count': 0,\n    'total_duration_seconds': 0,\n    'is_paused': False,\n    'is_reset': False,",
        "detail": "webapp",
        "documentation": {}
    },
    {
        "label": "app.secret_key",
        "kind": 5,
        "importPath": "webapp",
        "description": "webapp",
        "peekOfCode": "app.secret_key = 'your_secret_key'  # Replace with a real secret key\n# Initialize OpenAI API client\nclient = OpenAI_API()\n# Global variables to keep track of the task state\ntask_state = {\n    'cycle_count': 0,\n    'total_duration_seconds': 0,\n    'is_paused': False,\n    'is_reset': False,\n    'is_running': False,",
        "detail": "webapp",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "webapp",
        "description": "webapp",
        "peekOfCode": "client = OpenAI_API()\n# Global variables to keep track of the task state\ntask_state = {\n    'cycle_count': 0,\n    'total_duration_seconds': 0,\n    'is_paused': False,\n    'is_reset': False,\n    'is_running': False,\n    'task': '',\n    'interval': 0,",
        "detail": "webapp",
        "documentation": {}
    },
    {
        "label": "task_state",
        "kind": 5,
        "importPath": "webapp",
        "description": "webapp",
        "peekOfCode": "task_state = {\n    'cycle_count': 0,\n    'total_duration_seconds': 0,\n    'is_paused': False,\n    'is_reset': False,\n    'is_running': False,\n    'task': '',\n    'interval': 0,\n    'duration': 0\n}",
        "detail": "webapp",
        "documentation": {}
    }
]